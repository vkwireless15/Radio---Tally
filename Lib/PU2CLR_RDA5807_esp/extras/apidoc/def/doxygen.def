AutoGen Definitions dummy;
class = {
  cp-id     = 'group__GA01';
  cp-name   = 'RDA5807';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga1db36d126d26a553668c1b70de9b3823';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setDelayAfterCrystalOn';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ms_value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '632';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Delay After Crystal On (default 500ms)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Minimum time required for the oscillator to become stable
@param ms_value  Value in milliseconds
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1gadf634cb6733022e30d8f1a74a5946e78';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2CBusAddrs';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'directAccess';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fullAccess';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '641';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets alternatives I2C bus address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You do not need use this function on RDA5807M
@param directAccess
@param fullAccess
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a18c3e5a103b683af7c46d8b9a3d47518';
        sec-mem-ref-line = '606';
        sec-mem-ref-name = 'deviceAddressDirectAccess';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a81c00f45187f93be0698ef8c5bd80619';
        sec-mem-ref-line = '607';
        sec-mem-ref-name = 'deviceAddressFullAccess';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1gab9e3a5584a6238f719e9c9e49435f5ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusRegisters';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '647';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets all current device status and RDS information registers (From 0x0A to 0x0F)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see RDA5807M - SINGLE-CHIP BROADCAST FMRADIO TUNER; pages 5, 9, 12 and 13.
@see rda_reg0a, rda_reg0b, rda_reg0c, rda_reg0d, rda_reg0e, rda_reg0f
@see shadowStatusRegisters;
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gacfa48dfcf792a9bcee489658177aed90';
        sec-mem-ref-line = '826';
        sec-mem-ref-name = 'getRdsReady';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga69981ef141e22ab00e4bde3f18f84964';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
word16_to_bytes
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getDirectRegister';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'reg';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '648';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the register content via direct access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 this method is useful to deal with a specific register.
@param uint8_t register number
@return word16_to_bytes register content
@see  word16_to_bytes datatype in RDA5807.h
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga1f4bc3d6f9d94171b2965dbb4e812f4f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatus';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'reg';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '649';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the register content of a given status register (from 0x0A to 0x0F)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Useful when you need just a specific status register content.
\ilinebr\ilinebr This methos update the first element of the shadowStatusRegisters linked to the register
@return rdax_reg0a the reference to current value of the 0x0A register.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga3b581b82ab8c631cfec537a47008ddf3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRegister';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'reg';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '650';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets a given value to a specific device register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 146 

@see RDA5807M - SINGLE-CHIP BROADCAST FMRADIO TUNER; pages 5, 9, 10 and 11.
@see rda_reg02, rda_reg03, rda_reg04, rda_reg05, rda_reg06, rda_reg07

@param reg    register number (valid values is between 0x02 and 0x07)
@param value  the unsigned 16 bits word value (see rda_rec0x data types)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga677eff1084b294696a32e3ca4dfe593b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setGpio';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gpioPin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gpioSetup';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'mcuPin';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
-1
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '652';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Device GPIO pins.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This method is useful to add control to the system via GPIO RDA devive pins.
\ilinebr\ilinebr For example: You can use these pins to control RDS and SEEK via interrupt.
\ilinebr\ilinebr GPIOs are General Purpose I/O pin.
\ilinebr\ilinebr GPIO setup
\ilinebr\ilinebr When GPIO1 (#1), gpioSetup can be: 00 = High impedance; 01 = Reserved; 10 = Low; 11 = High
\ilinebr\ilinebr When GPIO2 (#2), gpioSetup can be: 00 = High impedance; 01 = Interrupt (INT) 10 = Low; 11 = High
\ilinebr\ilinebr When GPIO3 (#3), gpioSetup can be: 00 = High impedance; 01 = Mono/Stereo indicator (ST) = Low; 11 = High

@param gpioPin   gpio number (1, 2 or 3)
@param gpioSetup See description above
@param mcuPip    MCU (Arduino) pin connected to the gpio
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1gabd676c0e4ad20c6152a68f8daba64cb3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setInterruptMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '653';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets Interrupt Mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 GPIO2 could be programmed to output a low interrupt (interrupt will be generated only with interrupt enable bit STCIEN is set to high) when seek/tune process completes
\ilinebr\ilinebr Setting STCIEN = 1 will generate a low pulse on GPIO2 when the interrupt occurs.
\ilinebr\ilinebr ATTENTION: This function affects the behavior of the GPIO2 pin. The register 0x04 GPIO2 attribute will be setted to 1
@param value  0 =  disable; 1 = enqble
@see setGpio
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga3fe1feed45d3290beba0efef491128e6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'waitAndFinishTune';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '655';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Waits for Seek or Tune finish.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gade55e697c7752811086300e710727397';
        sec-mem-ref-line = '559';
        sec-mem-ref-name = 'seek';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gaa9cfaddbd43257e810bb3817b021fa8a';
        sec-mem-ref-line = '338';
        sec-mem-ref-name = 'setChannel';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga3f6dace4c93f82ec66da5641e3e3fdaa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'softReset';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '657';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Resets the device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The RDA5807M is RESET itself When VIO is Power up.
\ilinebr\ilinebr Also, it support soft reset by triggering the 0x02 register (rda_reg02) bit 1 from 0 to 1.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga30d2b0c4662922df53bcef118663329c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'powerUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '659';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Powers the receiver on.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga272444216a784ea5317c83783eb2bfe7';
        sec-mem-ref-line = '273';
        sec-mem-ref-name = 'setup';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga214f631aef72ece69db73c99879c7c46';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'powerDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '660';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Power the receiver off.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1ga272444216a784ea5317c83783eb2bfe7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'clock_frequency';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
CLOCK_32K
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'oscillator_type';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
OSCILLATOR_TYPE_PASSIVE
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'rlck_no_calibrate';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
RLCK_NO_CALIBRATE_MODE_OFF
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '662';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Starts the device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You can select the colck type and the frequency
\ilinebr\ilinebr oscillator type: OSCILLATOR_TYPE_CRYSTAL = passive crystal; OSCILLATOR_TYPE_REFCLK = active crystal or signal generator
\ilinebr\ilinebr Clock type: CLOCK_32K, CLOCK_12M, CLOCK_13M, CLOCK_19_2M, CLOCK_24M, CLOCK_26M and CLOCK_38_4M
@code {.cpp}
#include <RDA5807.h> 
RDA5807 rx; 
void setup() {
   rx.setup(); // Starts the receiver with default parameters
   // rx.setup(CLOCK_32K, OSCILLATOR_TYPE_ACTIVE);  // 32.768kHz Active Crystal
   // rx.setup(CLOCK_12M, OSCILLATOR_TYPE_PASSIVE); // 12MHz passive crystal 
   // rx.setup(CLOCK_38_4M, OSCILLATOR_TYPE_PASSIVE); // 38.4 MHz passive crystal
   rx.setFrequency(10390); // Tunes at 103.9 MHz  
}
void loop() {
}
@endcode

@param clock_frequency    optional; Clock frequency. Default 32.768 kHz.
@param oscillator_type    optional; Sets the Oscillator type (passive or active crystal); default: passive Crystal.
@param rlck_no_calibrate  optional; if 0=RCLK clock is always supply; 1=RCLK clock is not always supply when FM work
@see OSCILLATOR_TYPE_PASSIVE, OSCILLATOR_TYPE_ACTIVE, RLCK_NO_CALIBRATE_MODE_ON, RLCK_NO_CALIBRATE_MODE_OFF
@see powerUp, rda_reg02
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga30d2b0c4662922df53bcef118663329c';
        sec-mem-ref-line = '197';
        sec-mem-ref-name = 'powerUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1gab97c1c8ad3ab0cd5d2852f712caee0a1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setNewDemodulateMethod';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '664';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets new demodulate method. It can improve the receiver sensitivity about 1dB.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 226 

@param value  true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga965658767399e2f923852144e324805f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAFC';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '666';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets AFC true or false.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 316 

@param value  true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA08_1ga35428e147462af6490c382acdf769173';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setLnaIcSel';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '668';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets  LNA_ICSEL_BIT.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Lna working current bit: 0=1.8mA; 1=2.1mA; 2=2.5mA; 3=3.0mA (default 0).
@param value  - 0=1.8mA; 1=2.1mA; 2=2.5mA; 3=3.0mA
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA08_1gaf595aab626e55ab733af8682674faa61';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setLnaPortSel';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '669';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets LNA input port selection bit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 YOu can select: 0 = no input; 1 = LNAN; 2 = LNAP; 3: dual port input
@param value  - 0 = no input; 1 = LNAN; 2 = LNAP; 3: dual port input
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA08_1gacdf40b2507df37ef2f7cbed8c12c68f7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getLnaIcSel';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '678';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets  LNA_ICSEL_BIT current value.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Lna working current bit: 0=1.8mA; 1=2.1mA; 2=2.5mA; 3=3.0mA (default 0).
@return 0=1.8mA; 1=2.1mA; 2=2.5mA; 3=3.0mA

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA08_1gafa3762b30fbf95bd6bb04139faed47c6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getLnaPortSel';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '685';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets current vaue of the LNA input port selection bit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Values: 0 = no input; 1 = LNAN; 2 = LNAP; 3: dual port input
@return  0 = no input; 1 = LNAN; 2 = LNAP; 3: dual port input
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1gad16a6afa9520b77498b17a72c226305a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'frequency';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '687';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Tunes the receiver at a given frequency. Example:
@code {.cpp}
#include <RDA5807.h> 
RDA5807 rx; 
void setup() {
 pinMode(4, INPUT_PULLUP); // Arduino pin 4 - Frequency Up
 pinMode(5, INPUT_PULLUP); // Arduino pin 5 - Frequency Down
 rx.setup(); 
 rx.setFrequency(10390); // Tunes at 103.9 MHz 
}
void loop() {
 if (digitalRead(4) == LOW) rx.setFrequencyUp();
 if (digitalRead(5) == LOW) rx.setFrequencyDown();
 delay(200);
}
@endcode

@param frequency - an integer with the frequency value (Example: 7600=76MHz, 10790 = 107,90MHz)
@see setFrequencyUp, setFrequencyDown, getFrequency
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1gac879c84895fee9032c1b29638e209527';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyToBeginBand';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '696';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Tunes the receiver at the first channel/frequency of the current band.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 If the current band is 0, the lowest frequency is 87Mhz (8700)
@see  setFrequency, getFrequency, setFrequencyToEndBand, getRealFrequency, getMaximunFrequencyOfTheBand, getMinimumFrequencyOfTheBand
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga8042f480c26abb7f74560a29c0fb2f46';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyToEndBand';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '704';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Tunes the receiver at the last channel/frequency of the current band.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 If the current band is 0, the highest frequency is 108MHz (10800)
@see  setFrequency, getFrequency, setFrequencyToBeginBand, getRealFrequency, getMaximunFrequencyOfTheBand, getMinimumFrequencyOfTheBand
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga9e17e0a2176967ca812933fb57ccfa78';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getMaximunFrequencyOfTheBand';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '712';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
gets the maximun frequency of the current band
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return the last valid frequency of the current band
@see  setFrequency, getFrequency, setFrequencyToBeginBand, setFrequencyToEndBand, getRealFrequency, getMaximunFrequencyOfTheBand, getMinimumFrequencyOfTheBand
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga67d6e95313dd3b27d719af06cbcac813';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getMinimumFrequencyOfTheBand';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '720';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
gets the minimum frequency of the current band
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return the first valid frequency of the current band
@see  setFrequency, getFrequency, setFrequencyToBeginBand, setFrequencyToEndBand, getRealFrequency, getMaximunFrequencyOfTheBand, getMinimumFrequencyOfTheBand
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga59b981002d383a13731bd939482a5236';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '722';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint16_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga4e8db177fea475ea00fa04e3d8f1f08c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '723';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Increments the current frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The increment uses the band space as step. See array: uint16_t fmSpace[4] = {100/10, 200/10, 50/10, 25/10};
@code {.cpp}
#include <RDA5807.h> 
RDA5807 rx; 
void setup() {
 pinMode(4, INPUT_PULLUP); // Arduino pin 4 - Frequency Up
 pinMode(5, INPUT_PULLUP); // Arduino pin 5 - Frequency Down
 rx.setup(); 
 rx.setFrequency(10390); // Tunes at 103.9 MHz 
}
void loop() {
 if (digitalRead(4) == LOW) rx.setFrequencyUp();
 if (digitalRead(5) == LOW) rx.setFrequencyDown();
 delay(200);
}
@endcode
@see setFrequency, getFrequency
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1gadba771c864ace7a8373a76554b9d3e6a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '724';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Decrements the current frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The drecrement uses the band space as step. See array: uint16_t fmSpace[4] = {20, 10, 5, 1};
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga4b15ce7408d1d38989d9afdb6483b1f4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setDirectFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'frequency';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '726';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the frequency using the reg08 (direct frequency)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 valid when frequency mode is 1
@param frequency
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1gae0c05586e7230063b0c42fd5f4b24906';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '727';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the frequency mode.  If 1, then freq setting changed.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param value ( default = 0 or 1)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga1476967ed4e1d9bc00e2ea8e3135520e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRealFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '729';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current frequency bases on the current channel.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The current channel is stored in the 0x0A register. This value is updated after a tune or seek operation.
\ilinebr\ilinebr The current frequency can be calculated by the formula below

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Band \ilinebr </th>    <th class="markdownTableHeadNone"> Formula \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0 \ilinebr </td>    <td class="markdownTableBodyNone"> Frequency = Channel Spacing (kHz) x READCHAN[9:0]+ 87.0 MHz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 1 or 2 \ilinebr </td>    <td class="markdownTableBodyNone"> Frequency = Channel Spacing (kHz) x READCHAN[9:0]+ 76.0 MHz \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 3 \ilinebr </td>    <td class="markdownTableBodyNone"> Frequency = Channel Spacing (kHz) x READCHAN[9:0]+ 65.0 MHz \ilinebr </td>  </tr></table>

@see setChannel, setFrequency, setBand, setSpace
@see RDA5807M - SINGLE-CHIP BROADCAST FM RADIO TUNER - Rev.1.1–Aug.2015; pages 9 and 12.
@return uint16_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga39480a49f7878fffe8c3ddf120aba2b0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRealChannel';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '730';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current channel stored in 0x0A status register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 461 

@see setChannel, setFrequency, setBand, setSpace
@see RDA5807M - SINGLE-CHIP BROADCAST FM RADIO TUNER - Rev.1.1–Aug.2015; pages 9 and 12.

@return uint16_t current channel value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1gaa9cfaddbd43257e810bb3817b021fa8a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setChannel';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'channel';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '731';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the channel.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This method tunes the rteceiver in a given channel.
\ilinebr\ilinebr The channel can be calculated by using the follow formula
\ilinebr\ilinebr channel = (desired frequency - start band frequency) / space channel in use / 10.0);

@see setFrequency, setBand, setSpace
@see RDA5807M - SINGLE-CHIP BROADCAST FM RADIO TUNER - Rev.1.1–Aug.2015; pages 9 and 12.

@param channel
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga3fe1feed45d3290beba0efef491128e6';
        sec-mem-ref-line = '173';
        sec-mem-ref-name = 'waitAndFinishTune';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga87de696f0a40724c19c89b6b48766020';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seek';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'seek_mode';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'direction';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '732';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 look for next or previous station available. Example:
@code {.cpp}
#include <RDA5807.h> 
RDA5807 rx; 
void setup() {
   pinMode(4, INPUT_PULLUP); // Arduino pin 4 - Seek station down
   pinMode(5, INPUT_PULLUP); // Arduino pin 5 - Seek station up
   rx.setup(); // Starts the receiver with default parameters
   rx.setFrequency(10390); // Tunes at 103.9 MHz  - Switch to your local favorite station
}
void loop() {
  if (digitalRead(4) == LOW) rx.seek(RDA_SEEK_WRAP,RDA_SEEK_DOWN);
  if (digitalRead(5) == LOW) rx.seek(RDA_SEEK_WRAP,RDA_SEEK_UP);
  delay(200);
}
@endcode

@param seek_mode  if 0, wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit
@param direction  if 0, seek down; if 1, seek up.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1gade55e697c7752811086300e710727397';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seek';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'seek_mode';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'direction';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void(*)()
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'showFunc';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '733';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Seeks a station up or down.
\ilinebr\ilinebr Seek up or down a station and call a function defined by the user to show the frequency during the seek process.
\ilinebr\ilinebr Seek begins at the current channel, and goes in the direction specified with the SEEKUP bit. Seek operation stops when a channel is qualified as valid according to the seek parameters, the entire band has been searched (SKMODE = 0), or the upper or lower band limit has been reached (SKMODE = 1).
\ilinebr\ilinebr The STC bit is set high when the seek operation completes and/or the SF/BL bit is set high if the seek operation was unable to find a channel qualified as valid according to the seek parameters. The STC and SF/BL bits must be set low by setting the SEEK bit low before the next seek or tune may begin.
\ilinebr\ilinebr The SEEK bit is set low and the STC bit is set high when the seek operation completes.
\ilinebr\ilinebr It is important to say you have to implement a show frequency function. This function have to get the frequency via getFrequency function.
\ilinebr\ilinebr Example:
@code 

SI470X rx;

void showFrequency() {
   uint16_t freq = rx.getFrequency();
   Serial.print(freq);
   Serial.println("MHz ");
}

void loop() {
 .
 .
     rx.seek(RDA_SEEK_WRAP, RDA_SEEK_UP, showFrequency); // Seek Up
 .
 .
}
@endcode
@param seek_mode  Seek Mode; 0 = Wrap at the upper or lower band limit and continue seeking (default); 1 = Stop seeking at the upper or lower band limit.
@param direction  Seek Direction; 0 = Seek down (default); 1 = Seek up.
@param showFunc  function that you have to implement to show the frequency during the seeking process. Set NULL if you do not want to show the progress.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga3fe1feed45d3290beba0efef491128e6';
        sec-mem-ref-line = '173';
        sec-mem-ref-name = 'waitAndFinishTune';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga41dbf6ea359175b3671072a3c382d42c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '734';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RSSI Seek Threshold.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga889cfe43f3f9c9ca92c9862261d5dbbf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setBand';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'band';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '736';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the FM band. See table below.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 593 

FM band table

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Value \ilinebr </th>    <th class="markdownTableHeadNone"> Decimal \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 00 \ilinebr </td>    <td class="markdownTableBodyNone"> 0 \ilinebr </td>    <td class="markdownTableBodyNone"> 87–108 MHz (US/Europe) \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 01 \ilinebr </td>    <td class="markdownTableBodyNone"> 1 \ilinebr </td>    <td class="markdownTableBodyNone"> 76–91 MHz (Japan) \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 10 \ilinebr </td>    <td class="markdownTableBodyNone"> 2 \ilinebr </td>    <td class="markdownTableBodyNone"> 76–108 MHz (world wide) \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 11 \ilinebr </td>    <td class="markdownTableBodyNone"> 3 \ilinebr </td>    <td class="markdownTableBodyNone"> 65 –76 MHz (East Europe) or 50-65MHz (see bit 9 of gegister 0x07) \ilinebr </td>  </tr></table>

\ilinebr\ilinebr if you are using the band 3 with 50 to 65 MHz setup, the setFrequencyUp, setFrequencyDown, setFrequencyToBeginBand and setFrequencyToEndBand
\ilinebr\ilinebr will not work properly. In this case, you have control the limits of the band by yourself.
@code {.cpp}
#include <RDA5807.h>
RDA5807 rx;
void setup() {
  rx.setup();
  rx.setBand(2); // Sets band: 76–108 MHz (world wide)  
  rx.setFrequency(10390); // Tunes at 103.9 MHz
}
void loop() {
}
@endcode

@param band FM band index. See table above.
@see  setBand3_50_65_Mode, getBand3Status
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1gac6ace7da84074b90d8ecf075d14c7bfe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getBand';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '743';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the current band.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see FM Band table
@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga76f6c3400b038aef15ba7318592e1dd0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSpace';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'space';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '745';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the FM channel space.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You can define the frequency step in kHz (see table below)

Channel space table

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Value \ilinebr </th>    <th class="markdownTableHeadNone"> Decimal \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 00 \ilinebr </td>    <td class="markdownTableBodyNone"> 0 \ilinebr </td>    <td class="markdownTableBodyNone"> 100KHz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 01 \ilinebr </td>    <td class="markdownTableBodyNone"> 1 \ilinebr </td>    <td class="markdownTableBodyNone"> 200KHz \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 10 \ilinebr </td>    <td class="markdownTableBodyNone"> 2 \ilinebr </td>    <td class="markdownTableBodyNone"> 50KHz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 11 \ilinebr </td>    <td class="markdownTableBodyNone"> 3 \ilinebr </td>    <td class="markdownTableBodyNone"> 25KHz \ilinebr </td>  </tr></table>

@code {.cpp}
#include <RDA5807.h>
RDA5807 rx;
void setup() {
 pinMode(4, INPUT_PULLUP); // Arduino pin 4 - Frequency Up
 pinMode(5, INPUT_PULLUP); // Arduino pin 5 - Frequency Down
 rx.setup();
 rx.setBandSpace(2); // 50 kHz Step
 rx.setFrequency(10390); // Tunes at 103.9 MHz
}
void loop() {
 if (digitalRead(4) == LOW) rx.setFrequencyUp();   // Up 50 kHz
 if (digitalRead(5) == LOW) rx.setFrequencyDown(); // Down 50 kHz
 delay(200);
}
@endcode

@param space FM channel space. See table above.
 \xrefitem todo 1.@see setStep
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga8bbf57aaeb92f226179579efa61cc846';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setStep';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
100
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '746';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the FM Step;.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 -  
\ilinebr\ilinebr Converts the step frequency (25, 50, 100 or 200 kHz) to Space. Invalid values will be converted to 0 (100 kHz)
@param step  25, 50, 100 or 200 kHz
 \xrefitem todo 2.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1gab6cc94517eb6bc3325fbd6386bbffe15';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getSpace';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '752';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the current Band Space.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t value (0 = 100kHz, 1 = 200kHz, 2 = 50kHz e 3 = 25kHz)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga13f6c6e974c768a9456c049645434ca1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setBand3_50_65_Mode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'band3Mode';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '754';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the band 3 mode: 50 to 65 MHZ or 65 to 76 MHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 It works only for Band 3. So if you are on band 3 (default 65 – 76 MHz East Europe) you can change the range to 50-65MHz.
\ilinebr\ilinebr ATTENTION: The functions setFrequencyToBeginBand and setFrequencyToEnBand do not work for 50-65MHz setup. You have to control it by yourself.
\ilinebr\ilinebr ATTENTION: Also, you must control the band limits from 50 to 65 MHz. The setFrequencyUp and setFrequencyDown do not work properly.
@param band3Mode if 1, 65 – 76 MHz;  if 0, 50-65MHz
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1gaea595cf077e2a709bf927deddf8a63ba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getBand3Status';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '755';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the status of the Band3.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Gets the status of the Band3
@return 1 if setup is 65 to 76 MHz; 0 if setup is 50 to 65 MHz
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA08_1ga4bd7597d4c9090b04486aec21a6a0a5d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRssi';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '757';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current Rssi.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 RSSI; 000000 = min; 111111 = max; RSSI scale is logarithmic.

@return int
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga85d1635f7bd51c740546d69133a97530';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isFmTrue';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '764';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if the current channel is a station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga49ae7bc2ecf631c5391bab17b44df3fd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isFmReady';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '771';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if the FM is ready.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA02_1gad1d589d43adc89a93c5e07b2d4cb6a4c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getDeviceId';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '773';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Device identification.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return device number Id
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1gadd2c2ab8b861ab0714fdeb99c774d656';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSoftmute';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '777';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets Soft Mute Enable or disable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param value true = enable; false=disable
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga428ddd720c58c17273322d7526e51cbe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isSoftmuted';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '783';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the softmute status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true if enabled
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1gad6e77ffbeb3f4dc885548130e09590d6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setMono';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '785';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets audio Mono or stereo.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1521 

@param value TRUE = Mono; FALSE force stereo
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga250ff3788a7831dae3c6200919b446dd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isStereo';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '786';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current Stereo status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1547 

@return TRUE if stereo;
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga8002bb394ef19db02e04a39de04dffc5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setBass';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '787';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets Bass Boost.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1534 

@param value FALSE = Disable; TRUE = Enable
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga49e08eb54c1e235bd7516c552dee1320';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getBass';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '795';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets Bass Boost.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 791 

@return FALSE = Disable; TRUE = Enable
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga7955280c2b3a9b5e7336fc3862133b39';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setLedStereoIndicator';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
true
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '820';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the system to use a LED to indicate Stereo or Mono.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Call this function to setup the GPIO3 of the RDA5807FP (pin 15) to turn a LED on or OFF.
\ilinebr\ilinebr When Stereo, the GPIO3 is HIGH.
@code {.cpp}
#include <RDA5807.h>
RDA5807 rx;
void setup() {
   rx.setup();
   rx.setFrequency(10390); // Tunes in 103.9 MHz
   rx.setLedStereoIndicator(true); // The GPIO3 (pin 15 of the RDA5807) can use to turn a LED on when Stereo
}
void loop() {
}
@endcode

@param value true or false.
@see setGpio, isStereo
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1gafec3018913d735ee0684b88cf503c84a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setMute';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '822';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets Audio mute or unmute.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param value TRUE = mute; FALSE = unmute
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1gaef3ebf331e0646a67b6ebfa6d47c3a16';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isMuted';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '828';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets Audio Mute Status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return True if muted
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1gaf488f0fdb96addfa014ce05e977b8a52';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getMute';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '835';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets Audio Mute Status. Same isMuted.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return True if muted
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga5195195da106c05f29218910b17f6f6b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isAudioOutputHighImpedance';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '842';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets true if the output audio impedance is high.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return True or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1gaabd554f39778bf6d81712df0ea72d0fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAudioOutputHighImpedance';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '844';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets audio output impedance high ow low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Useful to setup high impedance headphones 
@param value TRUE = High; FALSE = Low
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga6dd81b0cff50747906d7d05b127112de';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSoftBlendEnable';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '845';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets Soft Blend.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 304 

@param value  true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga51bf4344ebeb44f7170265901df870f5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setVolume';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '847';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the audio volume level.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You can use values between 0 and 15. 
@code {.cpp}
#include <RDA5807.h>
RDA5807 rx;
void setup() {
  pinMode(4, INPUT_PULLUP); // Arduino pin 4 - Volume Up
  pinMode(5, INPUT_PULLUP); // Arduino pin 5 - Volume Down
  rx.setup();
  rx.setFrequency(10390); // Tunes at 103.9 MHz
  rx.setVolume(7);
}
void loop() {
  if (digitalRead(4) == LOW) rx.setVolumeUp();
  if (digitalRead(5) == LOW) rx.setVolumeDown();
  delay(200);
}
@endcode

@param value (from 0 to 15)
@see setVolumeUp, setVolumeDown, setMute, getVolume
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga743d91d820922b3feda10d06443bc8a9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getVolume';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '848';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current audio volume level.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1592 

@return uint8_t  0 to 15
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga864af32df4d3365e03f8876703218283';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setVolumeUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '849';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Increments the audio volume.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1603 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA07_1ga910965f74897b0246a0b3bed39743d8c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setVolumeDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '850';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Decrements the audio volume.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1617 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA03_1ga4f8fe00a561c39d2dc9a0a143b1866e9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmDeemphasis';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'de';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '852';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets De-emphasis.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Default is 75 μs (used in USA); 50 μs is used in Europe, Australia, Japan.
@code {.cpp}
#include <RDA5807.h>
RDA5807 rx;
void setup() {
 rx.setup();
 rx.setFrequency(10390); // Tunes at 103.9 MHz
 rx.setFmDeemphasis(1); // Sets to 50 μs. Used in Europe, Australia, Japan.
}
void loop() {
}
@endcode

@param de  0 = 75 μs; 1 = 50 μs
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga4b741f1433eda57949bb40fa9e973732';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRDS';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '855';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the RDS operation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enable or Disable the RDS
\ilinebr\ilinebr You must call this function before stating deal with RDS.   <br>
@code {.cpp}
#include <RDA5807.h> 
RDA5807 rx; 
void setup()
  rx.setup(); // Starts the receiver with default parameters
  rx.setRDS(true);
  rx.setRdsFifo(true);
  rx.setFrequency(10390); // Station with RDS service
}
@endcode
@param true = turns the RDS ON; false  = turns the RDS OFF
@see setRdsFifo
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gaecbab42ef08c486b2eb1ab25649c921a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRBDS';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '856';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the RBDS operation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enable or Disable the RDS

@param true = turns the RBDS ON; false  = turns the RBDS OFF
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gae27337170a5f3dedebf585aa19855ad6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRdsFifo';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '857';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RDS fifo mode enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1269 

@param value  If true, it makes the the fifo mode enable.
@return true  or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga196b453f68b2a23d2e6b2515c6412ee2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsFifo';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '858';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS fifo.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1282 

@param value  If true, clears the RDS fifo
@return true  or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga22c43e0f08a650bd32446eef6cd8f550';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsBuffer';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '859';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS Information (Station Name, Station Information, Program Information and Time)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Clear the buffer with latest RDS information
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a01973fd833000d82609206bfbef62977';
        sec-mem-ref-line = '599';
        sec-mem-ref-name = 'rds_buffer0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1af7eb4e812ca7b0883a3e9c7879a034d9';
        sec-mem-ref-line = '597';
        sec-mem-ref-name = 'rds_buffer2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a81d7aaf8d628afb9cc268777fea95045';
        sec-mem-ref-line = '598';
        sec-mem-ref-name = 'rds_buffer2B';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a3d9eae606a7de8a650611eaf1f9a8482';
        sec-mem-ref-line = '600';
        sec-mem-ref-name = 'rds_time';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gacfa48dfcf792a9bcee489658177aed90';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsReady';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '861';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if RDS Ready.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Read address 0Ah and check the bit RDSR.
\ilinebr\ilinebr When using the polling method, it is best not to poll continuously. The data will appear in intervals.
\ilinebr\ilinebr ATTENTION: You must call this function before calling any RDS query
@code {.cpp}
if (rx.getRdsReady()) {
   if (rx.hasRdsInfo() ) {
     rdsMsg = rx.getRdsProgramInformation();
     stationName = rx.getRdsStationName();
     rdsTime = rx.getRdsTime();  // Gets the UTC Time. Check the getRdsTime documentation for more details. Some stations do not broadcast the right time.
   }
}
@endcode

@return true or false
@see setRDS, setInterruptMode, getRdsAllData, getRdsSync, setRdsFifo
@see <a href="https://www.2wcom.com/fileadmin/redaktion/dokumente/Company/RDS_Basics.pdf" >2wcom - RDS BasicsRDS</a>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gab9e3a5584a6238f719e9c9e49435f5ce';
        sec-mem-ref-line = '79';
        sec-mem-ref-name = 'getStatusRegisters';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gadafba5991f6f60a52ad73fdda8fac984';
        sec-mem-ref-line = '897';
        sec-mem-ref-name = 'getRdsAllData';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gadafba5991f6f60a52ad73fdda8fac984';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsAllData';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char **
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stationName';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char **
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stationInformation';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char **
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'programInformation';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char **
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'utcTime';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '862';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets Station Name, Station Information, Program Information and utcTime.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function populates four char pointer variable parameters with Station Name, Station Information, Programa Information and UTC time.
\ilinebr\ilinebr You must call  setRDS(true), setRdsFifo(true) before calling getRdsAllData(...) 
\ilinebr\ilinebr ATTENTION: the parameters below are point to point to array of char. 
\ilinebr\ilinebr the right way to call this function is shown below.
@code {.cpp}

char *stationName, *stationInfo, *programInfo, *rdsTime;
// The char pointers above will be populate by the call below. So, the char pointers need to be passed by reference (pointer to pointer).
if (rx.getRdsAllData(&stationName, &stationInfo , &programInfo, &rdsTime) ) {
    showProgramaInfo(programInfo);  
    showStationName(stationName); 
    showStationInfo(stationInfo);
    showUtcTime(rdsTime); 
}
@endcode
@param stationName (reference)  - if NOT NULL,  point to Name of the Station (char array -  9 bytes)
@param stationInformation (reference)  - if NOT NULL, point to Station information (char array - 33 bytes)
@param programInformation (reference)  - if NOT NULL, point to program information (char array - 65 nytes)
@param utcTime  (reference)  - if NOT NULL, point to char array containing the current UTC time (format HH:MM:SS +HH:MM)
@return True if found at least one valid data 
@see setRDS, setRdsFifo, getRdsAllData
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gacfa48dfcf792a9bcee489658177aed90';
        sec-mem-ref-line = '826';
        sec-mem-ref-name = 'getRdsReady';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga5a26789f1910a5b2098919dbd50e6a3c';
        sec-mem-ref-line = '1056';
        sec-mem-ref-name = 'getRdsText0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga482098a64299cb8af976d4d10a460212';
        sec-mem-ref-line = '1086';
        sec-mem-ref-name = 'getRdsText2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gacd6614bc7be99d55a3d9a17739ee7074';
        sec-mem-ref-line = '1116';
        sec-mem-ref-name = 'getRdsText2B';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gaef398d848e7378ec4897965b8e1b4441';
        sec-mem-ref-line = '1143';
        sec-mem-ref-name = 'getRdsTime';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1gac6b8c39c1134700ce3e2a9e5216a5325';
        sec-mem-ref-line = '988';
        sec-mem-ref-name = 'hasRdsInfoAB';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga04e5fe0cacbdcae620388a15630cf9c1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsFlagAB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '863';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the current Text Flag A/B.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 ATTENTION: You must call getRdsReady before calling this function. 
@return uint8_t current Text Flag A/B
@see getRdsReady
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gad602518e28efa9abb8319f1f25480551';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isNewRdsFlagAB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '864';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if the Text Flag A/B  has changed.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function returns true if a new FlagAB has chenged. Also it clears the Station Name buffer in that condition.
\ilinebr\ilinebr It is useful to check and show the RDS Text in your application.
\ilinebr\ilinebr You must call getRdsReady before calling this function.

@return True or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a01973fd833000d82609206bfbef62977';
        sec-mem-ref-line = '599';
        sec-mem-ref-name = 'rds_buffer0A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gad85ccedd8baecd8bc2f42325a3ee8741';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsVersionCode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '865';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the version code (extracted from the Block B)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 ATTENTION: You must call getRdsReady before calling this function. 
@returns  0=A or 1=B
@see getRdsReady
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga32c361b9b996a5920519315aa86d174d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsGroupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '866';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Return the group type.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 ATTENTION: You must call getRdsReady before calling this function. 
@return uint16_t
@see getRdsReady
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gae3bde947a89c6dadfc4dc22aea85b467';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsProgramType';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '867';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Program Type (extracted from the Block B)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 ATTENTION: You must call getRdsReady before calling this function. 
@see https://en.wikipedia.org/wiki/Radio_Data_System
@see <a href="https://www.2wcom.com/fileadmin/redaktion/dokumente/Company/RDS_Basics.pdf" >2wcom RDS Basics</a>
@see getRdsReady
@return program type (an integer betwenn 0 and 31)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga54b3bea446e68453ee1ce57762ade2e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsTrafficProgramCode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '868';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Traffic Alerts given by the station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 ATTENTION: You must call getRdsReady before calling this function. 
@see https://en.wikipedia.org/wiki/Radio_Data_System
@see <a href="https://www.2wcom.com/fileadmin/redaktion/dokumente/Company/RDS_Basics.pdf" >2wcom RDS Basics</a>
@see getRdsReady
@return  0 = No Traffic Alerts; 1 = Station gives Traffic Alerts
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga6afb347f32121c480adea2a36032d56f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNext2Block';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'c';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '869';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Process data received from group 2B.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param c  char array reference to the "group 2B" text
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga5a26789f1910a5b2098919dbd50e6a3c';
        sec-mem-ref-line = '1056';
        sec-mem-ref-name = 'getRdsText0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gacd6614bc7be99d55a3d9a17739ee7074';
        sec-mem-ref-line = '1116';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga3ab713bb63978518d42a761b9db445c9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNext4Block';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'c';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '870';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Process data received from group 2A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1010 

@param c  char array reference to the "group  2A" text
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga482098a64299cb8af976d4d10a460212';
        sec-mem-ref-line = '1086';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga5a26789f1910a5b2098919dbd50e6a3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText0A';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '872';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the station name and other messages.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 ATTENTION: You must call getRdsReady before calling this function. 
@return char* should return a string with the station name.
        However, some stations send other kind of messages
@see getRdsReady
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga6afb347f32121c480adea2a36032d56f';
        sec-mem-ref-line = '977';
        sec-mem-ref-name = 'getNext2Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a01973fd833000d82609206bfbef62977';
        sec-mem-ref-line = '599';
        sec-mem-ref-name = 'rds_buffer0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gadafba5991f6f60a52ad73fdda8fac984';
        sec-mem-ref-line = '897';
        sec-mem-ref-name = 'getRdsAllData';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8h_1gac2defc3812e1900ccd1ac719268abe2e';
        sec-mem-ref-line = '881';
        sec-mem-ref-name = 'getRdsStationName';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gac2defc3812e1900ccd1ac719268abe2e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsStationName';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '881';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Station Name.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Alias for getRdsText0A
\ilinebr\ilinebr ATTENTION: You must call getRdsReady before calling this function. 
@return char* should return a string with the station name. However, some stations send other kind of messages
@see getRdsText0A
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga5a26789f1910a5b2098919dbd50e6a3c';
        sec-mem-ref-line = '1056';
        sec-mem-ref-name = 'getRdsText0A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga482098a64299cb8af976d4d10a460212';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText2A';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '883';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Program Information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@ 

\ilinebr\ilinebr Process the program information data. 
\ilinebr\ilinebr ATTENTION: You must call getRdsReady before calling this function. 
@return char array with the program information (63 bytes) 
@see getRdsReady
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga3ab713bb63978518d42a761b9db445c9';
        sec-mem-ref-line = '1014';
        sec-mem-ref-name = 'getNext4Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1af7eb4e812ca7b0883a3e9c7879a034d9';
        sec-mem-ref-line = '597';
        sec-mem-ref-name = 'rds_buffer2A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gadafba5991f6f60a52ad73fdda8fac984';
        sec-mem-ref-line = '897';
        sec-mem-ref-name = 'getRdsAllData';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8h_1ga73610b1372a8bdaa959862881eae05fb';
        sec-mem-ref-line = '892';
        sec-mem-ref-name = 'getRdsProgramInformation';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga73610b1372a8bdaa959862881eae05fb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsProgramInformation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '892';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Program Information (RT - Radio Text)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@ 
\ilinebr\ilinebr Process the program information data. Same getRdsText2A(). It is a alias for getRdsText2A.
\ilinebr\ilinebr ATTENTION: You must call getRdsReady before calling this function. 
@return char array with the program information (63 bytes)
@see getRdsText2A
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga482098a64299cb8af976d4d10a460212';
        sec-mem-ref-line = '1086';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gacd6614bc7be99d55a3d9a17739ee7074';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText2B';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '894';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Station Information.  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 3.\ilinebr\ilinebr ATTENTION: You must call getRdsReady before calling this function. 
@return char array with the Text of Station Information (33 bytes)
@see getRdsReady
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga6afb347f32121c480adea2a36032d56f';
        sec-mem-ref-line = '977';
        sec-mem-ref-name = 'getNext2Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a81d7aaf8d628afb9cc268777fea95045';
        sec-mem-ref-line = '598';
        sec-mem-ref-name = 'rds_buffer2B';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gadafba5991f6f60a52ad73fdda8fac984';
        sec-mem-ref-line = '897';
        sec-mem-ref-name = 'getRdsAllData';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8h_1ga2e78c58aca2f5121306d2e5ceb98effd';
        sec-mem-ref-line = '902';
        sec-mem-ref-name = 'getRdsStationInformation';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga2e78c58aca2f5121306d2e5ceb98effd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsStationInformation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '902';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Station Information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 ATTENTION: You must call getRdsReady before calling this function. 
@return char array with the Text of Station Information (33 bytes)
@see getRdsReady
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gacd6614bc7be99d55a3d9a17739ee7074';
        sec-mem-ref-line = '1116';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gaef398d848e7378ec4897965b8e1b4441';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsTime';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '904';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS UTC time and date when the Group type is 4.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 ATTENTION: You must call getRdsReady before calling this function. 
\ilinebr\ilinebr ATTENTION: Some stations broadcast wrong time.
@return char* a string with hh:mm +/- offset
@see getRdsReady
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a3d9eae606a7de8a650611eaf1f9a8482';
        sec-mem-ref-line = '600';
        sec-mem-ref-name = 'rds_time';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gadafba5991f6f60a52ad73fdda8fac984';
        sec-mem-ref-line = '897';
        sec-mem-ref-name = 'getRdsAllData';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gaa3432b4df8ec20277e3d3be60782b395';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsLocalTime';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '905';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS time converted to local time.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 4.\ilinebr\ilinebr ATTENTION: You must call getRdsReady before calling this function. 
\ilinebr\ilinebr ATTENTION: Some stations broadcast wrong time.
@return char* a string with hh:mm 
@see getRdsReady
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a3d9eae606a7de8a650611eaf1f9a8482';
        sec-mem-ref-line = '600';
        sec-mem-ref-name = 'rds_time';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga2e63d5c85cb1825492a5ba2ea3bef2c3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getBlockId';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '916';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current Block ID.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You must call getRdsReady before calling this function
@see getRdsReady
\ilinebr\ilinebr 1= the block id of register 0cH,0dH,0eH,0fH is E
\ilinebr\ilinebr 0= the block id of register 0cH, 0dH, 0eH,0fH is A, B, C, D
@return  0= the block id of register 0cH, 0dH, 0eH,0fH is A, B, C, D; 1 = the block id of register 0cH,0dH,0eH,0fH is E
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga24e26921d1b0931681ae4cf9c23742d4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getErrorBlockA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '939';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current Status of block A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You must call getRdsReady before calling this function
@see getRdsReady
Block Errors Level of RDS_DATA_0, and is always read as Errors Level of RDS BLOCK A (in RDS mode) or BLOCK E (in RBDS mode when ABCD_E flag is 1)

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Bin \ilinebr </th>    <th class="markdownTableHeadNone"> Dec \ilinebr </th>    <th class="markdownTableHeadNone"> description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 00 \ilinebr </td>    <td class="markdownTableBodyNone"> 0 \ilinebr </td>    <td class="markdownTableBodyNone"> 0 errors requiring correction \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 01 \ilinebr </td>    <td class="markdownTableBodyNone"> 1 \ilinebr </td>    <td class="markdownTableBodyNone"> 1~2 errors requiring correction \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 10 \ilinebr </td>    <td class="markdownTableBodyNone"> 2 \ilinebr </td>    <td class="markdownTableBodyNone"> 3~5 errors requiring correction \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 11 \ilinebr </td>    <td class="markdownTableBodyNone"> 3 \ilinebr </td>    <td class="markdownTableBodyNone"> 6+ errors or error in checkword, correction not possible \ilinebr </td>  </tr></table>

 <strong>Available only in RDS Verbose mode</strong>

@return  value See table above.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gadcc73bed36f5dbad1b41a8777be575d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getErrorBlockB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '963';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current Status of block B.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You must call getRdsReady before calling this function
@see getRdsReady

Block Errors Level of RDS_DATA_1, and is always read as Errors Level of RDS BLOCK B (in RDS mode ) or E (in RBDS mode when ABCD_E flag is 1).

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Bin \ilinebr </th>    <th class="markdownTableHeadNone"> Dec \ilinebr </th>    <th class="markdownTableHeadNone"> description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 00 \ilinebr </td>    <td class="markdownTableBodyNone"> 0 \ilinebr </td>    <td class="markdownTableBodyNone"> 0 errors requiring correction \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 01 \ilinebr </td>    <td class="markdownTableBodyNone"> 1 \ilinebr </td>    <td class="markdownTableBodyNone"> 1~2 errors requiring correction \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 10 \ilinebr </td>    <td class="markdownTableBodyNone"> 2 \ilinebr </td>    <td class="markdownTableBodyNone"> 3~5 errors requiring correction \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 11 \ilinebr </td>    <td class="markdownTableBodyNone"> 3 \ilinebr </td>    <td class="markdownTableBodyNone"> 6+ errors or error in checkword, correction not possible \ilinebr </td>  </tr></table>

 <strong>Available only in RDS Verbose mode</strong>

@return  value See table above.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga0d809c6cc2928e1fee006713f77b60e9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'hasRdsInfo';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '976';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true when the RDS system has valid information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Returns true if RDS currently synchronized; the information are A, B, C and D blocks; and no errors
\ilinebr\ilinebr You must call getRdsReady before calling this function
@see getRdsReady
@return  true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1gac6b8c39c1134700ce3e2a9e5216a5325';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'hasRdsInfoAB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '988';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true when the RDS system has valid information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You must call getRdsReady before calling this function
@see getRdsReady
@return  true or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gadafba5991f6f60a52ad73fdda8fac984';
        sec-mem-ref-line = '897';
        sec-mem-ref-name = 'getRdsAllData';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA04_1ga25df690020bab4154b0737e7365ed8ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsSync';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1001';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Rds Sync.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You must call getRdsReady before calling this function
@see getRdsReady
\ilinebr\ilinebr Returns true if RDS currently synchronized.
@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA06_1gafe324014c135a510714e7d722f291273';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2SOn';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1007';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enables I2S setup.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 When setting I2S_ENABLE (register 04) bit is high, the RDA5807FP you can get the output signals SCK, WS, SD signals from GPIO3, GPIO1 and  GPIO2 (I2S master)

@param value  true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA06_1ga2070bff9af95a523a77ac304eee7b22f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2SAllParameters';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'R_DELY';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'L_DELY';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SCLK_O_EDGE';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SW_O_EDGE';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'I2S_SW_CNT';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'WS_I_EDGE';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'DATA_SIGNED';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SCLK_I_EDGE';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'WS_LR';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SLAVE_MASTER';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OPEN_MODE';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1008';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configures all parameters for I2S.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 I2S setup must be enabled
\ilinebr\ilinebr I2S_SW_CNT can be: I2S_WS_STEP_48, I2S_WS_STEP_44_1, I2S_WS_STEP_32, I2S_WS_STEP_24, I2S_WS_STEP_22_05, I2S_WS_STEP_16, I2S_WS_STEP_12, I2S_WS_STEP_11_025 or I2S_WS_STEP_8

@param R_DELY If 1, R channel data delay 1T
@param L_DELY If 1, L channel data delay 1T
@param SCLK_O_EDGE If 1, invert sclk output when as master
@param SW_O_EDGE If 1, invert ws output when as master
@param I2S_SW_CNT Only valid in master mode. See table above
@param WS_I_EDGE  If 0, use normal ws internally; If 1, inverte ws internally
@param DATA_SIGNED If 0, I2S output unsigned 16-bit audio data. If 1, I2S output signed 16-bit audio data.
@param SCLK_I_EDGE If 0, use normal sclk internally;If 1, inverte sclk internally
@param WS_LR Ws relation to l/r channel; If 0, ws=0 ->r, ws=1 ->l; If 1, ws=0 ->l, ws=1 ->r
@param SLAVE_MASTER I2S slave or master; 1 = slave; 0 = master
@param OPEN_MODE Open reserved register mode;  11=open behind registers writing function others: only open behind registers reading function

@see RDA microelectronics RDA5807FP - SINGLE-CHIP BROADCAST FM RADIO TUNER pages 11 and 12

@see setI2SOn
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA06_1ga70f086ccb3be49c4c51133bae2e8b113';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2SMaster';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1009';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param value  true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA06_1ga3d5618cd755c0a56fea68ea589bb828f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2SSpeed';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1010';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the speed in kbps. You can use the predefined constantes: I2S_WS_STEP_48, I2S_WS_STEP_44_1, I2S_WS_STEP_32,.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
   /

I2S_WS_STEP_24, I2S_WS_STEP_22_05, I2S_WS_STEP_16, I2S_WS_STEP_12, I2S_WS_STEP_11_025 or I2S_WS_STEP_8

@param value value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__GA06_1gabeb9446fc371fe58e075bea7ebc51fdb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2SDataSigned';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1011';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 0, I2S output unsigned 16-bit audio data. If 1, I2S output signed 16-bit audio data.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1468 

@param value  true (1) or false (0)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__G05_1ga0f40d75452088ceeffb4d8969fb34999';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'convertToChar';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'strValue';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'len';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'dot';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'separator';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'remove_leading_zeros';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
true
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1014';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Converts a number to a char array.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 It is useful to mitigate memory space used by functions like sprintf or othetr generic similar functions
\ilinebr\ilinebr You can use it to format frequency using decimal or tousand separator and also to convert smalm numbers.

@param value  value to be converted
@param strValue char array that will be receive the converted value
@param len final string size (in bytes)
@param dot the decimal or tousand separator position
@param separator symbol "." or ","
@param remove_leading_zeros if true removes up to two leading zeros (default is true)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__G05_1ga2275869d5ec1bd0eaea2e278e2a70cc7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'formatFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'strValue';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'decimalSeparator';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1025';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Convert a numeric frequency to a formated string (char *) frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1018 

@param uint16_t value  - A given frequency to be formated
@param char *strValue - Formated frequency (Exe: 103,90) - Array of char ( minimal 7 elements )
@param char decimalSeparator - the symbol that separates the decimal part (Exe: . or ,)
@return point of strValue
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__G05_1ga43c6c86481dd1fdba0fc14438bc8e18e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'formatCurrentFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'decimalSeparator';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
','
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1039';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Convert the current frequency to a formated string (char *) frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The current frequency is the latest setted frequency by setFrequency, seek, setFrequencyUp and setFrequencyDown.
@param char decimalSeparator - the symbol that separates the decimal part (Exe: . or ,)
@return point char string strFrequency (member variable)
@see setFrequency, seek, setFrequencyUp and setFrequencyDown
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'RDA5807_8h_1a7f1dad9330a21ce952c91d55ef8e2ad0';
        sec-mem-ref-line = '603';
        sec-mem-ref-name = 'strFrequency';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__G05_1ga16f6ef1f816a032fb07a91017c34bb50';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'checkI2C';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'addressArray';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '1045';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Check the I2C bus address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1358 

@param uint8_t address Array - this array will be populated with the I2C bus addresses found (minimum three elements)
@return 0 if no i2c device is found; -1 if error is found or n > 0, where n is the number of I2C bus address found
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ae51bb0aaf958ee320da80866bb20ffb5';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'shadowStatusRegisters';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '571';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
shadow status registers
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ae9572809d64fc5c82f95d4f26d5c308d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'shadowRegisters';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '572';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
shadow configuration registers
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1af9cbd65bd00bce76f8b362159cf9d589';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg00 *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg00';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg00 *)&shadowRegisters[0]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '575';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a63267deb8311ff567df5ae6202ffa3fb';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg01 *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg01';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg01 *)&shadowRegisters[1]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '576';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a68804842ce8d8c4304bc260b6a386e12';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg02 *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg02';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg02 *)&shadowRegisters[2]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '577';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a132aac1d76094cdc72e5b4b7db289c82';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg03 *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg03';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg03 *)&shadowRegisters[3]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '578';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a62e2d8060258c3a4d3406831092d2072';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg04 *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg04';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg04 *)&shadowRegisters[4]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '579';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a990456ae8b88efa66b0816010ee24244';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg05 *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg05';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg05 *)&shadowRegisters[5]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '580';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1af368d9ec82388831ddf4749f0a83a1b3';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg06 *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg06';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg06 *)&shadowRegisters[6]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '581';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a35030e0df66225f165407b4848ec8921';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg07 *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg07';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg07 *)&shadowRegisters[7]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '582';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a57b48edbf9ba4cef513cc45223c690d8';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg08 *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg08';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg08 *)&shadowRegisters[8]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '583';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a249a8706a3b945522e2215e4eeea7407';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg0a *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg0a';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg0a *)&shadowStatusRegisters[0]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '586';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ab14d92c603d940e16e2f1fa6b179b74f';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg0b *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg0b';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg0b *)&shadowStatusRegisters[1]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '587';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a72a563279c17e5646a892ae77cfd8c1a';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg0c *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg0c';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg0c *)&shadowStatusRegisters[2]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '588';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a619559a0a083492f37527f5206a6c25d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg0d *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg0d';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg0d *)&shadowStatusRegisters[3]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '589';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a61725075be18d3439886e1414a0ac119';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg0e *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg0e';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg0e *)&shadowStatusRegisters[4]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '590';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a1613897e42f69fadd07a6e0c713a4c6b';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rda_reg0f *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reg0f';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= (rda_reg0f *)&shadowStatusRegisters[5]
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '591';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1acddb5bea9e4872e9aecf4dc9bd89a1e6';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'startBand';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= {8700, 7600, 7600, 6500}
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '593';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aaede268d40e40776118adbc1a8400418';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'endBand';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= {10800, 9100, 10800, 7600}
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '594';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
End FM band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ad77c4ef4294d6de7b1711bac943ae97c';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fmSpace';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= {10, 20, 5, 1}
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '595';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1af7eb4e812ca7b0883a3e9c7879a034d9';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_buffer2A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '597';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RT - RDS Radio Text buffer - Program Information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga22c43e0f08a650bd32446eef6cd8f550';
        sec-mem-ref-line = '1299';
        sec-mem-ref-name = 'clearRdsBuffer';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga482098a64299cb8af976d4d10a460212';
        sec-mem-ref-line = '1086';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a81d7aaf8d628afb9cc268777fea95045';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_buffer2B';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '598';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Radio Text buffer - Station Information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga22c43e0f08a650bd32446eef6cd8f550';
        sec-mem-ref-line = '1299';
        sec-mem-ref-name = 'clearRdsBuffer';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gacd6614bc7be99d55a3d9a17739ee7074';
        sec-mem-ref-line = '1116';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a01973fd833000d82609206bfbef62977';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_buffer0A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '599';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PS - RDS Basic tuning and switching information (Type 0 groups) - Station Name.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga22c43e0f08a650bd32446eef6cd8f550';
        sec-mem-ref-line = '1299';
        sec-mem-ref-name = 'clearRdsBuffer';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga5a26789f1910a5b2098919dbd50e6a3c';
        sec-mem-ref-line = '1056';
        sec-mem-ref-name = 'getRdsText0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gad602518e28efa9abb8319f1f25480551';
        sec-mem-ref-line = '858';
        sec-mem-ref-name = 'isNewRdsFlagAB';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a3d9eae606a7de8a650611eaf1f9a8482';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_time';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '600';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CT - RDS date time received information - UTC Time.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1ga22c43e0f08a650bd32446eef6cd8f550';
        sec-mem-ref-line = '1299';
        sec-mem-ref-name = 'clearRdsBuffer';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gaa3432b4df8ec20277e3d3be60782b395';
        sec-mem-ref-line = '1208';
        sec-mem-ref-name = 'getRdsLocalTime';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8cpp_1gaef398d848e7378ec4897965b8e1b4441';
        sec-mem-ref-line = '1143';
        sec-mem-ref-name = 'getRdsTime';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ae83461389f706c7a27512e5e08655f1b';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'oldTextABFlag';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '601';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Saves the latest value of the textABFlag. Useful to check chanhes.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7f1dad9330a21ce952c91d55ef8e2ad0';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'strFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '603';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8h_1ga43c6c86481dd1fdba0fc14438bc8e18e';
        sec-mem-ref-line = '1039';
        sec-mem-ref-name = 'formatCurrentFrequency';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a18c3e5a103b683af7c46d8b9a3d47518';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'deviceAddressDirectAccess';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= I2C_ADDR_DIRECT_ACCESS
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '606';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8h_1gadf634cb6733022e30d8f1a74a5946e78';
        sec-mem-ref-line = '641';
        sec-mem-ref-name = 'setI2CBusAddrs';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a81c00f45187f93be0698ef8c5bd80619';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'deviceAddressFullAccess';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= I2C_ADDR_FULL_ACCESS
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '607';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'RDA5807_8h_1gadf634cb6733022e30d8f1a74a5946e78';
        sec-mem-ref-line = '641';
        sec-mem-ref-name = 'setI2CBusAddrs';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a55c07acd68120f74f787999364fc92c9';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resetPin';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '609';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a14040afdfd6c6cf486278c4e75c63927';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '610';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aaf56888de5a078b5e5090a0b0dd6ae61';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentFMBand';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '611';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ae175c8602c76c5512c61b836de086620';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentFMSpace';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '612';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a33272a8f152f2307adc012072b8e0582';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentVolume';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '613';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a022d3357b6bddf3477b3f26f2d78a75c';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'gpio1Control';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= -1
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '615';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Can be used to add control to the  system via GPIO1 pin.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ab6a9fc2bd5ca266079c3e7796b5025af';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'gpio2Control';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= -1
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '616';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Can be used to add control to the  system via GPIO2 pin.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ae6f2d5f535edc14951e75a03e46ebc01';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'gpio3Control';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= -1
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '617';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Can be used to add control to the  system via GPIO3 pin.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1af0c39d19376c30217eeb6bf17b398e46';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clockFrequency';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= CLOCK_32K
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '619';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a4c8780f2d28725d66850f9e3be14745a';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'oscillatorType';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= OSCILLATOR_TYPE_PASSIVE
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '620';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ac3714ff155c783961b0d097000837ee5';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rlckNoCalibrate';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= RLCK_NO_CALIBRATE_MODE_OFF
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '621';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Default is 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a8b9e02f7c7121cf57fc0006f4ff7162a';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'maxDelayAftarCrystalOn';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= MAX_DELAY_AFTER_OSCILLATOR
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '623';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '567';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
KT0915 Class.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 This class implements all functions that will help you to control the KT0915 devices.

@author PU2CLR - Ricardo Lima Caratti
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'RDA5807';
        node-link = {
          node-link-id = 'group__GA01#classRDA5807';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg00
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg01
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg02
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg03
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg04
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg05
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg06
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg07
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg08
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '11';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg0a
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '12';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg0b
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '13';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg0c
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '14';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg0d
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '15';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg0e
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '16';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
reg0f
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'rda_reg00';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg00';
        };
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'rda_reg01';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg01';
        };
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'rda_reg02';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg02';
        };
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'rda_reg03';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg03';
        };
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'rda_reg04';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg04';
        };
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'rda_reg05';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg05';
        };
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'rda_reg06';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg06';
        };
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'rda_reg07';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg07';
        };
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'rda_reg08';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg08';
        };
      }; /* node */
      node = {
        node-id    = 11;
        node-label = 'rda_reg0a';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg0a';
        };
      }; /* node */
      node = {
        node-id    = 12;
        node-label = 'rda_reg0b';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg0b';
        };
      }; /* node */
      node = {
        node-id    = 13;
        node-label = 'rda_reg0c';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg0c';
        };
      }; /* node */
      node = {
        node-id    = 14;
        node-label = 'rda_reg0d';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg0d';
        };
      }; /* node */
      node = {
        node-id    = 15;
        node-label = 'rda_reg0e';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg0e';
        };
      }; /* node */
      node = {
        node-id    = 16;
        node-label = 'rda_reg0f';
        node-link = {
          node-link-id = 'group__GA01#unionrda__reg0f';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg00';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ac5a1a7191e10e3c1d300537387e6acbc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg00::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '113';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a4032484c615397b498d1af01aa1d1453';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '114';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '107';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x00.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 104 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg00.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ab1408e92ecfc268499c1ff228bf815b2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'LOW_CHIP_ID';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '111';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Chip ifdef.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ae9ab18e96e3a6f4d4f9ade0ea0501da4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'HIGH_CHIP_ID';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '112';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '109';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg01';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a95db31874aa1c376e10041fbf4c04bd0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg01::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '128';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a5753f7265ef5b1291ff160c431ebe863';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '129';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '122';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x01 - Dummy.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 It is not documented by the RDA.
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg01.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a51ab88497cad20027df936afa223b23d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '126';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7b99e4a5dc723242645ede8c604610df';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '127';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '124';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg02';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a1809838a4ec469d3ff1eeb7dacb89252';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg02::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '172';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a1a250acebf8f445cc5b685da35ae2b7a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '173';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '154';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x02 - Basic setup: RESET configuration;.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 Clock type configuration; seek operation; Sterio/Mono; Bass;  and Audio configuration
\ilinebr\ilinebr The RDA5807M is RESET itself when power up. You also can use soft reset by triggering SOFT_RESET bit to 1.
\ilinebr\ilinebr Seek begins in the direction specified by SEEKUP and ends when a channel is found, or the entire band has been searched.
\ilinebr\ilinebr The SEEK bit is set low and the STC bit is set high when the seek operation completes.
\ilinebr\ilinebr RCLK NON-CALIBRATE MODE. if 0=RCLK clock is always supply; if 1=RCLK clock is not always supply when FM work ( when 1, RDA5807M can’t directly support -20 °C ~70 °C temperature.
\ilinebr\ilinebr Only suppory ±20°C temperature swing from tune point).

 Clock CLK_MODE table

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Value \ilinebr </th>    <th class="markdownTableHeadNone"> Clock \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 000 \ilinebr </td>    <td class="markdownTableBodyNone"> 32.768kHz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 001 \ilinebr </td>    <td class="markdownTableBodyNone"> 12Mhz \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 101 \ilinebr </td>    <td class="markdownTableBodyNone"> 24Mhz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 010 \ilinebr </td>    <td class="markdownTableBodyNone"> 13Mhz \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 110 \ilinebr </td>    <td class="markdownTableBodyNone"> 26Mhz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 011 \ilinebr </td>    <td class="markdownTableBodyNone"> 19.2Mhz \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 111 \ilinebr </td>    <td class="markdownTableBodyNone"> 38.4Mhz \ilinebr </td>  </tr></table>
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg02.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ab332708e4304e13c9b424e7465254954';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ENABLE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '158';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Power Up Enable; 0 = Disabled; 1 = Enabled.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1afea1117fa1ab6be6c3b43d3df783cce0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SOFT_RESET';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '159';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Soft reset; If 0, not reset; If 1, reset.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a60923301c913b155d020368e74200657';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'NEW_METHOD';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '160';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
New Demodulate Method Enable, can improve 0 the receive sensitivity about 1dB.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a1ede90c00f1a2c926163d5203ec3b75e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDS_EN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '161';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS/RBDS enable; If 1, rds/rbds enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7f2173081ed2422920d15baa1919e01b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CLK_MODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '162';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
See table above.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a3afc70c9a6693899b152ca51a42f07b7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SKMODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '163';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek Mode; 0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a71fa98cecf9e896e77d11325dbe19dc6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SEEK';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '164';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek; 0 = Disable stop seek; 1 = Enable;.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aed8a1fd68dec9364930b51d020ba07d6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SEEKUP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '165';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek Up; 0 = Seek down; 1 = Seek up.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ad1ec79cd81992e6bd3131ce076f78679';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RCLK_DIRECT_IN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '166';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RCLK clock use the directly input mode. 1 = enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a253053953b1971ea97f782cc746e5e55';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'NON_CALIBRATE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '167';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
0=RCLK clock is always supply; 1=RCLK clock is not always supply when FM work
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ae1618eb6a84ac61faefe0a87d5649689';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BASS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '168';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Bass Boost; 0 = Disabled; 1 = Bass boost enabled.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1af5f75f1b95652443e4398974b82c3f7c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MONO';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '169';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mono Select; 0 = Stereo; 1 = Force mono.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1af7dd74521218c605e3553fdeb618e6eb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DMUTE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '170';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mute Disable; 0 = Mute; 1 = Normal operation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1adec239f2597576f6182f387472c2272b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DHIZ';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '171';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Audio Output High-Z Disable; 0 = High impedance; 1 = Normal operation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '156';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg03';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a8a7bf8e4ddb7f76cbafe53ba366d04ca';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg03::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '221';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a896ca93bb7040c45cbf062396d40ebca';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '222';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '212';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x03.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 Receiver configuratio
\ilinebr\ilinebr The tune operation begins when the TUNE bit is set high. The STC bit is set high when the tune operation completes.
\ilinebr\ilinebr The tune bit is reset to low automatically when the tune operation completes

Channel space table

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Value \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 00 \ilinebr </td>    <td class="markdownTableBodyNone"> 100KHz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 01 \ilinebr </td>    <td class="markdownTableBodyNone"> 200KHz \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 10 \ilinebr </td>    <td class="markdownTableBodyNone"> 50KHz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 11 \ilinebr </td>    <td class="markdownTableBodyNone"> 25KHz \ilinebr </td>  </tr></table>


FM band table

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Value \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 00 \ilinebr </td>    <td class="markdownTableBodyNone"> 87–108 MHz (US/Europe) \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 01 \ilinebr </td>    <td class="markdownTableBodyNone"> 76–91 MHz (Japan) \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 10 \ilinebr </td>    <td class="markdownTableBodyNone"> 76–108 MHz (world wide) \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 11 \ilinebr </td>    <td class="markdownTableBodyNone"> 65 –76 MHz (East Europe) or 50-65MHz (see bit 9 of gegister 0x06) \ilinebr </td>  </tr></table>

 Channel select table

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> BAND \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0 \ilinebr </td>    <td class="markdownTableBodyNone"> Frequency = Channel Spacing (kHz) x CHAN+ 87.0 MHz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 1 or 2 \ilinebr </td>    <td class="markdownTableBodyNone"> Frequency = Channel Spacing (kHz) x CHAN + 76.0 MHz \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 3 \ilinebr </td>    <td class="markdownTableBodyNone"> Frequency = Channel Spacing (kHz) x CHAN + 65.0 MHz \ilinebr </td>  </tr></table>
IMPORTANT: CHAN is updated after a seek operation.
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg03.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a6506ae39fdca9845e3a6de3865183e57';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SPACE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '216';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
See Channel space table above.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aa8a5bbeedca093b94b7f0d3f185b98f7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BAND';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '217';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seet band table above.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a05069c0e15b79590b44ff985487037b7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'TUNE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '218';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Tune; 0 = Disable; 1 = Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a799f81e68cf18ca017f69d9405267e41';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DIRECT_MODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '219';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Directly Control Mode, Only used when test.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1adf21771052967392286eeab054755423';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CHAN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '220';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Channel Select.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '214';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg04';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1af1c6e72539ee65749eb0f049303ad616';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg04::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '249';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a5c872e111c0fbaf477625700a2076359';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '250';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '232';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x04.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 Receiver properties
\ilinebr\ilinebr Volume scale is logarithmic When 0000, output mute and output impedance is very large
\ilinebr\ilinebr Setting STCIEN = 1 will generate a low pulse on GPIO2 when the interrupt occurs.
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg04.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a0ed149a12d2a87f1496cdc90c23bfb1c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPIO1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '236';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
General Purpose I/O 1. when gpio_sel=01; 00 = High impedance; 01 = Reserved; 10 = Low; 11 = High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ac8715973930ed16be4d52340ef11181b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPIO2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '237';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
General Purpose I/O 2. when gpio_sel=01; 00 = High impedance; 01 = Reserved; 10 = Low; 11 = High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1af2d579fe9d83fc7fe6f55c570c02af38';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPIO3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '238';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
General Purpose I/O 1. when gpio_sel=01; 00 = High impedance; 01 = Mono/Stereo indicator (ST); 10 = Low; 11 = High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aff7333bc2a0234725b53e4e4207e1915';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'I2S_ENABLE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '239';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I2S enable; 0 = disabled; 1 = enabled.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a1742cf1b14a750532e645aab85933d3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSVD1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '240';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1afddec52dd7b530641dc1ae72d27a429f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AFCD';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '241';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
AFC disable; If 0, afc work; If 1, afc disabled.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7e06d843d0840990717eb42b3b7e554c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SOFTMUTE_EN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '242';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 1, softmute enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a28055088ef40b9bdc9378b3809a21199';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDS_FIFO_CLR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '243';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = clear RDS fifo
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a3a52f3c22ed6fcde5bf696a6c02c9e73';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '244';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
De-emphasis; 0 = 75 μs; 1 = 50 μs.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a39f20b8df74171b4ee31bab0b0680310';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDS_FIFO_EN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '245';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = RDS fifo mode enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a9acb1f82a2515f84bce0747ced06fed8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RBDS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '246';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = RBDS mode enable; 0 = RDS mode only
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ab09bf67829bc4d5914945a87be624698';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '247';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek/Tune Complete Interrupt Enable; 0 = Disable Interrupt; 1 = Enable Interrupt;.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a8d50eb6e30711e4eb7625e651ed1a11d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSVD2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '248';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '234';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg05';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ad2153e9e90608e267b44117ececc5783';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg05::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '268';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aaa18c311f81277e3d73436ea0b601bb1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '269';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '257';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x05.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg05.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a730956af87021c351084317bbc63eea6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'VOLUME';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '261';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DAC Gain Control Bits (Volume); 0000 = min volume; 1111 = max volume.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a160505dce0d227e0f21232f52fef890f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'LNA_ICSEL_BIT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '262';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lna working current bit: 00=1.8mA; 01=2.1mA; 10=2.5mA; 11=3.0mA.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a11b8f14c44524bb37f0a89d4b5559a94';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'LNA_PORT_SEL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '263';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
LNA input port selection bit: 00: no input; 01: LNAN; 10: LNAP; 11: dual port input.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a991f75a1bf4d56192acecdf31ad3db47';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SEEKTH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '264';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek SNR Threshold value.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a8d50eb6e30711e4eb7625e651ed1a11d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSVD2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '265';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ac34168e070146678d72546abc1c8b236';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SEEK_MODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '266';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Default value is 00; When = 10, will add the RSSI seek mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a54e8dc27cd18af681fec547952404531';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INT_MODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '267';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 0, generate 5ms interrupt; If 1, interrupt last until read reg0CH action occurs.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '259';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg06';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a360eecf942f40d3f51812293e76a0d67';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg06::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '306';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a6821afdfb5ab6f0a279ef1c4fdeaa9e1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '307';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '290';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x06.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 274 

I2S_SW_CNT values table

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Value \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0b1000 \ilinebr </td>    <td class="markdownTableBodyNone"> WS_STEP_48 \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 0b0111 \ilinebr </td>    <td class="markdownTableBodyNone"> WS_STEP=44.1kbps \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0b0110 \ilinebr </td>    <td class="markdownTableBodyNone"> WS_STEP=32kbps \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 0b0101 \ilinebr </td>    <td class="markdownTableBodyNone"> WS_STEP=24kbps \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0b0100 \ilinebr </td>    <td class="markdownTableBodyNone"> WS_STEP=22.05kbps \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 0b0011 \ilinebr </td>    <td class="markdownTableBodyNone"> WS_STEP=16kbps \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0b0010 \ilinebr </td>    <td class="markdownTableBodyNone"> WS_STEP=12kbps \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 0b0001 \ilinebr </td>    <td class="markdownTableBodyNone"> WS_STEP=11.025kbps \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0b0000 \ilinebr </td>    <td class="markdownTableBodyNone"> WS_STEP=8kbps \ilinebr </td>  </tr></table>
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg06.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a575d0f8dbbda12d743c6cbd80436d8d2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'R_DELY';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '294';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 1, R channel data delay 1T.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a4ce1c95146a332f39eb691cbc95ccbb2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'L_DELY';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '295';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 1, L channel data delay 1T.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a3f5cd3a22eb13c67f7d20adcd15f1ad1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SCLK_O_EDGE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '296';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 1, invert sclk output when as master.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a90f7e01cd9d2f78095b8d23a9dc1b18d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SW_O_EDGE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '297';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 1, invert ws output when as master.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1afbff3a29529e5e3276e2bebab1f15a3f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'I2S_SW_CNT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '298';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Only valid in master mode. See table above.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ab5e655121ad945deced0a44ac51ad7c9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'WS_I_EDGE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '299';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 0, use normal ws internally; If 1, inverte ws internally.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ac20607bab830e003f8aef1927f30da81';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DATA_SIGNED';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '300';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 0, I2S output unsigned 16-bit audio data. If 1, I2S output signed 16-bit audio data.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ab0a4aea0751fa685c79ed52660ad78fb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SCLK_I_EDGE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '301';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 0, use normal sclk internally;If 1, inverte sclk internally.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a8f48ecc038b447fc3a713924344e8094';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'WS_LR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '302';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Ws relation to l/r channel; If 0, ws=0 ->r, ws=1 ->l; If 1, ws=0 ->l, ws=1 ->r.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a5b44678fa097828236f91b766d1bca94';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SLAVE_MASTER';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '303';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I2S slave or master; 1 = slave; 0 = master.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a6e2ac78f66cfafa9ecf1b7e62f037b43';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OPEN_MODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '304';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Open reserved register mode;  11=open behind registers writing function others: only open behind registers reading function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ae57526e5b56fb9372080178384f4c872';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSVD';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '305';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '292';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg07';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ac5c4daceecb405708b96c79b477db70b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg07::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '325';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a2dacd798a51d8fc4effa015d9d16c1a0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '326';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '314';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x07.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg07.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aad08cffd0c185c95ee8611afce73ec18';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQ_MODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '318';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 1, then freq setting changed. Freq = 76000(or 87000) kHz + freq_direct (08H) kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a6183fe98d5a6c9859da1f4d1bd75af33';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SOFTBLEND_EN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '319';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If 1, Softblend enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a733877b31393b0f040b3a649004e8e5d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SEEK_TH_OLD';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '320';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek threshold for old seek mode, Valid when Seek_Mode=001.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a1742cf1b14a750532e645aab85933d3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSVD1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '321';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a07e1e84799a0bd2c979bff75111e85d5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MODE_50_60';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '322';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = 65~76 MHz;  0 = 50~76MHz
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a76b1c2c14aefb604449d3ff3f0ae80c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'TH_SOFRBLEND';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '323';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Threshold for noise soft blend setting, unit 2dB (default 0b10000).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a8d50eb6e30711e4eb7625e651ed1a11d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSVD2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '324';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '316';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg08';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a6b901f2c85429c6822d5e8dc19d1c780';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg08::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '342';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7ca80902d2748f8f0dca2edafafdeebe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'directFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '343';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '336';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x08 - Direct Frequency.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 Valid when freq_mode = 1
\ilinebr\ilinebr Freq = 7600(or 8700) kHz + freq_direct (08H) kHz.
\ilinebr\ilinebr Value to be stores is frequency - 7600 or 8700
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg08.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a51ab88497cad20027df936afa223b23d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '340';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7b99e4a5dc723242645ede8c604610df';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '341';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '338';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0a';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ac3a52ed2e4783d2bb7c1e82716c98af3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg0a::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '373';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a4739c58f7e2dcffa54e2368e98716e99';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '374';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '362';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x0A - Device current status.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 The seek fail flag (SF) is set when the seek operation fails to find a channel with an RSSI level greater than SEEKTH[5:0].
\ilinebr\ilinebr The seek/tune complete (STC) flag is set when the seek or tune operation completes.


 Channel table

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> BAND \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0 \ilinebr </td>    <td class="markdownTableBodyNone"> Frequency = Channel Spacing (kHz) x CHAN+ 87.0 MHz \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 1 or 2 \ilinebr </td>    <td class="markdownTableBodyNone"> Frequency = Channel Spacing (kHz) x CHAN + 76.0 MHz \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 3 \ilinebr </td>    <td class="markdownTableBodyNone"> Frequency = Channel Spacing (kHz) x CHAN + 65.0 MHz \ilinebr </td>  </tr></table>
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0a.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1abe63df93c3d4af07359a55d5902f0f7a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'READCHAN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '366';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
See Channel table . See table above.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aec8e57d71f07e31203035548b79d03c8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ST';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '367';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stereo Indicator; 0 = Mono; 1 = Stereo.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a3c723083c9b52fde34d2c4beb725942f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLK_E';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '368';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
When RDS enable: 1 = Block E has been found; 0 = no Block E has been found.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a3928b702beefaf125960c8f1f7fceac7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '369';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Synchronization; 0 = RDS decoder not synchronized(default); 1 = RDS decoder synchronized; Available only in RDS Verbose mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a94a990462684a2fbb5dfc7fab1c8975d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SF';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '370';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek Fail. 0 = Seek successful; 1 = Seek failure;.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a3a247d1d806ebfcd27b09041e3186b4e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '371';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek/Tune Complete. 0 = Not complete; 1 = Complete;.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1accd030164321bb71a36d491b2e6cd424';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '372';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS ready; 0 = No RDS/RBDS group ready(default); 1 = New RDS/RBDS group ready.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '364';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0b';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a0eeacb17a43648ed4c922fb16253fa5c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg0b::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '404';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a025a972ff39a3584183e12de290d0fb6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '405';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '393';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x0B.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 Current RDS and device status

Errors Level table (Block Errors Level of RDS_DATA_0 and RDS_DATA_1.
Always read as Errors Level of RDS BLOCKs A and B (in RDS mode ) or E (in RBDS mode when ABCD_E flag is 1).

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Value \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 00 \ilinebr </td>    <td class="markdownTableBodyNone"> 0 errors requiring correction \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 01 \ilinebr </td>    <td class="markdownTableBodyNone"> 1~2 errors requiring correction \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 10 \ilinebr </td>    <td class="markdownTableBodyNone"> 3~5 errors requiring correction \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 10 \ilinebr </td>    <td class="markdownTableBodyNone"> 6+ errors or error in checkword, correction not possible \ilinebr </td>  </tr></table>
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0b.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1abf73094dcea591929f5c4ffe912d6750';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLERB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '397';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Errors Level of RDS_DATA_1.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a5cf5d2b056255cb2235ce6c52c0e9795';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLERA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '398';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Errors Level of RDS_DATA_0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a297000d9caac4f06fe67d8972202b2f8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ABCD_E';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '399';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = the block id of register 0cH,0dH,0eH,0fH is E;  0 = the block id of register 0cH, 0dH, 0eH,0fH is A, B, C, D
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a1742cf1b14a750532e645aab85933d3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSVD1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '400';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7b86ad4e3ff3b175ed1b73968c43140f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FM_READY';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '401';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1=ready; 0=not ready.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aa792520704f786ade70d6a06b6b8ba34';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FM_TRUE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '402';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = the current channel is a station; 0 = the current channel is not a station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a6833f5d3374c1679bea428b50dbad9cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSSI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '403';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSSI; 000000 = min; 111111 = max; RSSI scale is logarithmic.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '395';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0c';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aa8b7d1851c44335e2380eb7a4468c093';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg0c::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '420';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aa84daa949defa1d8459599e6a5f7774e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '421';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
BLOCK A ( in RDS mode) or BLOCK E (in RBDS mode when ABCD_E flag is 1)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '414';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x0C.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 BLOCK A ( in RDS mode) or BLOCK E (in RBDS mode when ABCD_E flag is 1)
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0c.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a51ab88497cad20027df936afa223b23d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '418';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7b99e4a5dc723242645ede8c604610df';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '419';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '416';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0d';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a28f1298327e3fc8309f38005be0b70a2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg0d::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '436';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a8ea42352501defa20b4a586e146035d2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '437';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '430';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x0D.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 BLOCK B ( in RDS mode) or BLOCK E (in RBDS mode when ABCD_E flag is 1)
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0d.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a51ab88497cad20027df936afa223b23d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '434';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7b99e4a5dc723242645ede8c604610df';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '435';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '432';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0e';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a63c425b6b07f0604a43481f0312d3d59';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg0e::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '452';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a519e4146ff314e51a19f354ec7f07b8e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '453';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '446';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x0E.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 BLOCK C ( in RDS mode) or BLOCK E (in RBDS mode when ABCD_E flag is 1)
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0e.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a51ab88497cad20027df936afa223b23d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '450';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7b99e4a5dc723242645ede8c604610df';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '451';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '448';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0f';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a2277c8c28e92e2ad993af1c0c5fb4c94';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rda_reg0f::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '468';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a468a600809a23e18a9b40dadccfd3740';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSD';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '469';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '462';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Register 0x0F.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 BLOCK D ( in RDS mode) or BLOCK E (in RBDS mode when ABCD_E flag is 1)
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rda_reg0f.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a51ab88497cad20027df936afa223b23d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '466';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7b99e4a5dc723242645ede8c604610df';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '467';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '464';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rds_blockb';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ac5781cba2e954484c72ae3077e25afcf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rds_blockb::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'group0';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '501';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a0a430ac426505b17010fe872dba656a8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rds_blockb::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'group2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '510';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1ab34c18f5ea4466a422f8370757d4fcbc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rds_blockb::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '519';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a5dae9f2b7edfd4dff7592ed38e403344';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'blockB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '520';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '488';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
RDS Block B data type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 474 

\ilinebr\ilinebr For GCC on System-V ABI on 386-compatible (32-bit processors), the following stands:

1) Bit-fields are allocated from right to left (least to most significant).
2) A bit-field must entirely reside in a storage unit appropriate for its declared type.
   Thus a bit-field never crosses its unit boundary.
3) Bit-fields may share a storage unit with other struct/union members, including members that are not bit-fields.
   Of course, struct members occupy different parts of the storage unit.
4) Unnamed bit-fields' types do not affect the alignment of a structure or union, although individual
   bit-fields' member offsets obey the alignment constraints.

@see also https://en.wikipedia.org/wiki/Radio_Data_System
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rds_blockb.group0';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a884d9804999fc47a3c2694e49ad2536a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'address';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '493';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aa1b1c0cd777edd2e5cfcaf8e2e7dcab8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '494';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7a663caea1b722a63dc2868158ed584d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '495';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a890a10788493e3d572586e991cd43543';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'TA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '496';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a264bd2c2ca8c895803767b0d39ff4a09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'programType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '497';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a59e69d63ce38754ea53c4461b5cba1e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'trafficProgramCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '498';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a20583dcf173525a78f726ef45329c5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'versionCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '499';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a19223bd3731a4215ead3ba6a1eb8bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'groupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '500';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '491';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rds_blockb.group2';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a884d9804999fc47a3c2694e49ad2536a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'address';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '504';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a652bfdc159637b708ac6e6f92d7650bc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'textABFlag';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '505';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a264bd2c2ca8c895803767b0d39ff4a09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'programType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '506';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a59e69d63ce38754ea53c4461b5cba1e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'trafficProgramCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '507';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a20583dcf173525a78f726ef45329c5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'versionCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '508';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a19223bd3731a4215ead3ba6a1eb8bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'groupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '509';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '502';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rds_blockb.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a9a0364b9e99bb480dd25e1f0284c8555';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'content';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '513';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a652bfdc159637b708ac6e6f92d7650bc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'textABFlag';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '514';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a264bd2c2ca8c895803767b0d39ff4a09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'programType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '515';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a59e69d63ce38754ea53c4461b5cba1e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'trafficProgramCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '516';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a20583dcf173525a78f726ef45329c5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'versionCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '517';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a19223bd3731a4215ead3ba6a1eb8bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'groupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '518';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '511';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'rds_date_time';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a9bcded0e419c611d9920953260c352cb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct rds_date_time::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '542';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1abb6c459455299730ef24dc149a871202';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '543';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '533';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Group RDS type 4A ( RDS Date and Time)
When group type 4A is used by the station, it shall be transmitted every minute according to EN 50067.
This Structure uses blocks 2,3 and 5 (B,C,D)

ATTENTION:
To make it compatible with 8, 16 and 32 bits platforms and avoid Crossing boundary, it was necessary to
split minute and hour representation.
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'rds_date_time.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7a86c157ee9713c34fbd7a1ee40f0c5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'offset';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '537';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a5ba6e404c489ff4f757e7c77cb9fa310';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'offset_sense';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '538';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a0a7d55be9d12a369a6a8da0fb517fba4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'minute';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '539';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a896c55cc5e46fab38ce9f51ebf7bfcd3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'hour';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '540';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7f7685b39180278dd0fa69f523c7bd24';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mjd';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '541';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '535';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__GA01';
  cp-name   = 'word16_to_bytes';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1aac9f5d78f176c0422d073877cd65fe51';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct word16_to_bytes::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '556';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1abed44166b8c3d82c0c44fb317d3b650a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '557';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '550';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Converts 16 bits word to two bytes.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__GA01';
  cp-name   = 'word16_to_bytes.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a51ab88497cad20027df936afa223b23d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '554';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__GA01_1a7b99e4a5dc723242645ede8c604610df';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highByte';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      sec-mem-desc-line = '555';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  cp-fileline  = '552';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
file = {
  file-id   = 'RDA5807_8cpp';
  file-name = 'RDA5807.cpp';
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'RDA5807_8h';
  file-name = 'RDA5807.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1afb81dd661d531fa5c5422549fab7588f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MAX_DELAY_AFTER_OSCILLATOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '29';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a391d926a92f7cd486866d16b53bf9bc8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2C_ADDR_DIRECT_ACCESS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '31';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Can be used to access a given register at a time.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1acae259a7c57b67ef6c890c1c178dce00';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2C_ADDR_FULL_ACCESS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '32';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Can be used to access a set of register at a time.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1ad0763fd256db4ec1ecc62f84bbff56e2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'OSCILLATOR_TYPE_CRYSTAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '34';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Same OSCILLATOR_TYPE_PASSIVE (Legacy)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a0941eab712587842e5513eb6cd562717';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'OSCILLATOR_TYPE_PASSIVE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '35';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Passive Crystal.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1ad079e38ccae2f64aa341332e2ccb8b8e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'OSCILLATOR_TYPE_REFCLK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '36';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Same OSCILLATOR_TYPE_ACTIVE (Lagacy)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a6231498726197328216bb70c6dfc21aa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'OSCILLATOR_TYPE_ACTIVE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '37';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reference clock (active crystal oscillator or signal generator)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a0bc18a7036f4f2571abdb66daa63c918';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RLCK_NO_CALIBRATE_MODE_ON';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '38';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1acf26b27b8292674e78e04908e3c27bff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RLCK_NO_CALIBRATE_MODE_OFF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '39';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1aaaa8a7748321c8739d938babeb67d8e9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLOCK_32K';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '41';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
32.768kHz
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a7161794919bf15d59a7266f4f4286345';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLOCK_12M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '42';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
12Mhz
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1abc1ed9bc20cc60e460427165671eedbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLOCK_13M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '43';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
13Mhz
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a7e2e33a05c45d29254940aa2e6787881';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLOCK_19_2M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b011
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '44';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
19.2Mhz
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1aba23c874d4dca5d2a56e7ed7f8c8972e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLOCK_24M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b101
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
24Mhz
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1aab44e9c9586b2d6ca816e20dd04bc7b4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLOCK_26M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b110
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '46';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
26Mhz
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a99d478076fadfab2791d09e00ed1a780';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLOCK_38_4M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b111
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '47';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
38.4Mhz
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a128f40c85c30594203fd937611ba5f2c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDS_STANDARD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '49';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1acdc3372b73fee284997dbef795123257';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDS_VERBOSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '50';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1aecb43af824137b805ef778575bb1755b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDA_FM_BAND_USA_EU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '52';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
87.5–108 MHz (US / Europe, Default)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1ad4baaf95cb1692947a4faebfea59c5ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDA_FM_BAND_JAPAN_WIDE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
76–91 MHz (Japan wide band)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a4a70e6ea770ca5e1ab7035a9838a699b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDA_FM_BAND_WORLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '54';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
76–108 MHz (world wide)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a6110423784aaf630ec0ade041bc296a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDA_FM_BAND_SPECIAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
65 –76 MHz(East Europe) or 50 - 65MHz(see bit 9 of gegister 0x07)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a52b8411f4955a310beb41daaa5f352af';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDA_SEEK_WRAP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '57';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Wrap at the upper or lower band limit and continue seeking.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a8b7a44cf48668f90e59f62b34b4ce16a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDA_SEEK_STOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stop seeking at the upper or lower band limit.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a74e39d5bc02861c91b57da7751729ef1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDA_SEEK_DOWN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '59';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek Down.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a6cfac82e09114c1cdf276646ad595949';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RDA_SEEK_UP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek UP.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a748ad53bef975af9c1edbcacc58e5be4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG00';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '62';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x00.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a09a3d3fef9f53f0dbe1dd0072f02c1d4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG02';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x02
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '63';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x02.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1ac2446f96334b533154259a21c13950e6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG03';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x03
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '64';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x03.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a88dee04c27a51e335798ab012dccbea1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG04';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x04
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x04.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a848ac333ddfea97bc1f16a2e69eaf953';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG05';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x05
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '66';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x05.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1ac5641e8e0c3254714bcd533a4b0111ca';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG06';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x06
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x06.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a2a41df49654ae321f569bfabfa74de24';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG07';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x07
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '68';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x07.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a96f1c217ac648e08bc64dd3b9086612c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG08';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x08
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x08.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a5ec596211175cecd682755f5e996b6dd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG0A';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0A
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x0A.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a76c73d8e23848f8d73679450c2d7264b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG0B';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0B
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x0B.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a0e3b6e600782d453f87223f87784c54d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG0C';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0C
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '72';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x0C.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a41b7a4f7b9e629eb87dba4152995a616';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG0D';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0D
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x0D.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a1a5322c7bc447986d2d3b4d13de95315';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG0E';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0E
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '74';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x0E.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a949846d6974a39c871614c2f15ee0691';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG0F';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0F
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register 0x0F.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1aab666077c255544a7917c9c3bc1c9823';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SH_REG0A';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Shadow array position for register 0x0A.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1aab0f53fa6543d47802083a4392f3cae8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SH_REG0B';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '78';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Shadow array position for register 0x0B.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a97d86a295365c8476e3383c294a9ed1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SH_REG0C';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '79';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Shadow array position for register 0x0C - RDS Block A.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a85cd795594517e3bce030696a8a6bb97';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SH_REG0D';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Shadow array position for register 0x0D - RDS Block B.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a03c5e8c07784d364f88f9c856e1468bf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SH_REG0E';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '81';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Shadow array position for register 0x0E - RDS Block C.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a3c08c738466db46639091800ff72d36c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SH_REG0F';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '82';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Shadow array position for register 0x0F - RDS Block D.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a8cc7bca87e8bd1915883f98e0375100d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2S_WS_STEP_48';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b1000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a8f09a53b7b1826db85f4b60e431eb78b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2S_WS_STEP_44_1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b0111
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a83b94de83fe3e0137781766c9d24ff03';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2S_WS_STEP_32';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b0110
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '86';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a1eb6de93bc10ee0d2285bb0a96ea4d34';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2S_WS_STEP_24';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b0101
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1aa4420ec166a5a69646e3e7920b3a9ae4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2S_WS_STEP_22_05';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b0100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '88';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a09b2cfeb7551abc5f42c0e8843308a39';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2S_WS_STEP_16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b0011
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '89';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a57fa45d0d016b7519d0d15442cdfcade';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2S_WS_STEP_12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b0010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '90';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a0a5f68f3a153a03accb7b21be33daf2e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2S_WS_STEP_11_025';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b0001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '91';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'RDA5807_8h_1a36c4bf71600437c900e73d2d573f4529';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'I2S_WS_STEP_8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b0000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
      define-mem-desc-line = '92';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/rda5XXX/rda5807/RDA5807/src/RDA5807.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
